# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.1
#
# <auto-generated>
#
# Generated from file `server.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SpotifyDuPauvre
_M_SpotifyDuPauvre = Ice.openModule('SpotifyDuPauvre')
__name__ = 'SpotifyDuPauvre'

if 'Music' not in _M_SpotifyDuPauvre.__dict__:
    _M_SpotifyDuPauvre.Music = Ice.createTempClass()
    class Music(object):
        def __init__(self, title='', artist='', album=''):
            self.title = title
            self.artist = artist
            self.album = album

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.title)
            _h = 5 * _h + Ice.getHash(self.artist)
            _h = 5 * _h + Ice.getHash(self.album)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SpotifyDuPauvre.Music):
                return NotImplemented
            else:
                if self.title is None or other.title is None:
                    if self.title != other.title:
                        return (-1 if self.title is None else 1)
                else:
                    if self.title < other.title:
                        return -1
                    elif self.title > other.title:
                        return 1
                if self.artist is None or other.artist is None:
                    if self.artist != other.artist:
                        return (-1 if self.artist is None else 1)
                else:
                    if self.artist < other.artist:
                        return -1
                    elif self.artist > other.artist:
                        return 1
                if self.album is None or other.album is None:
                    if self.album != other.album:
                        return (-1 if self.album is None else 1)
                else:
                    if self.album < other.album:
                        return -1
                    elif self.album > other.album:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SpotifyDuPauvre._t_Music)

        __repr__ = __str__

    _M_SpotifyDuPauvre._t_Music = IcePy.defineStruct('::SpotifyDuPauvre::Music', Music, (), (
        ('title', (), IcePy._t_string),
        ('artist', (), IcePy._t_string),
        ('album', (), IcePy._t_string)
    ))

    _M_SpotifyDuPauvre.Music = Music
    del Music

if '_t_musicResults' not in _M_SpotifyDuPauvre.__dict__:
    _M_SpotifyDuPauvre._t_musicResults = IcePy.defineSequence('::SpotifyDuPauvre::musicResults', (), _M_SpotifyDuPauvre._t_Music)

if '_t_byteList' not in _M_SpotifyDuPauvre.__dict__:
    _M_SpotifyDuPauvre._t_byteList = IcePy.defineSequence('::SpotifyDuPauvre::byteList', (), IcePy._t_byte)

if '_t_musicList' not in _M_SpotifyDuPauvre.__dict__:
    _M_SpotifyDuPauvre._t_musicList = IcePy.defineSequence('::SpotifyDuPauvre::musicList', (), IcePy._t_string)

_M_SpotifyDuPauvre._t_Server = IcePy.defineValue('::SpotifyDuPauvre::Server', Ice.Value, -1, (), False, True, None, ())

if 'ServerPrx' not in _M_SpotifyDuPauvre.__dict__:
    _M_SpotifyDuPauvre.ServerPrx = Ice.createTempClass()
    class ServerPrx(Ice.ObjectPrx):

        def helloWorld(self, helloWorld, context=None):
            return _M_SpotifyDuPauvre.Server._op_helloWorld.invoke(self, ((helloWorld, ), context))

        def helloWorldAsync(self, helloWorld, context=None):
            return _M_SpotifyDuPauvre.Server._op_helloWorld.invokeAsync(self, ((helloWorld, ), context))

        def begin_helloWorld(self, helloWorld, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_helloWorld.begin(self, ((helloWorld, ), _response, _ex, _sent, context))

        def end_helloWorld(self, _r):
            return _M_SpotifyDuPauvre.Server._op_helloWorld.end(self, _r)

        def publishMessage(self, msg, context=None):
            return _M_SpotifyDuPauvre.Server._op_publishMessage.invoke(self, ((msg, ), context))

        def publishMessageAsync(self, msg, context=None):
            return _M_SpotifyDuPauvre.Server._op_publishMessage.invokeAsync(self, ((msg, ), context))

        def begin_publishMessage(self, msg, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_publishMessage.begin(self, ((msg, ), _response, _ex, _sent, context))

        def end_publishMessage(self, _r):
            return _M_SpotifyDuPauvre.Server._op_publishMessage.end(self, _r)

        def playMusic(self, filename, context=None):
            return _M_SpotifyDuPauvre.Server._op_playMusic.invoke(self, ((filename, ), context))

        def playMusicAsync(self, filename, context=None):
            return _M_SpotifyDuPauvre.Server._op_playMusic.invokeAsync(self, ((filename, ), context))

        def begin_playMusic(self, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_playMusic.begin(self, ((filename, ), _response, _ex, _sent, context))

        def end_playMusic(self, _r):
            return _M_SpotifyDuPauvre.Server._op_playMusic.end(self, _r)

        def pauseMusic(self, context=None):
            return _M_SpotifyDuPauvre.Server._op_pauseMusic.invoke(self, ((), context))

        def pauseMusicAsync(self, context=None):
            return _M_SpotifyDuPauvre.Server._op_pauseMusic.invokeAsync(self, ((), context))

        def begin_pauseMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_pauseMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_pauseMusic(self, _r):
            return _M_SpotifyDuPauvre.Server._op_pauseMusic.end(self, _r)

        def stopMusic(self, context=None):
            return _M_SpotifyDuPauvre.Server._op_stopMusic.invoke(self, ((), context))

        def stopMusicAsync(self, context=None):
            return _M_SpotifyDuPauvre.Server._op_stopMusic.invokeAsync(self, ((), context))

        def begin_stopMusic(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_stopMusic.begin(self, ((), _response, _ex, _sent, context))

        def end_stopMusic(self, _r):
            return _M_SpotifyDuPauvre.Server._op_stopMusic.end(self, _r)

        def uploadPart(self, part, context=None):
            return _M_SpotifyDuPauvre.Server._op_uploadPart.invoke(self, ((part, ), context))

        def uploadPartAsync(self, part, context=None):
            return _M_SpotifyDuPauvre.Server._op_uploadPart.invokeAsync(self, ((part, ), context))

        def begin_uploadPart(self, part, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_uploadPart.begin(self, ((part, ), _response, _ex, _sent, context))

        def end_uploadPart(self, _r):
            return _M_SpotifyDuPauvre.Server._op_uploadPart.end(self, _r)

        def uploadFileAndInsertMusic(self, filename, context=None):
            return _M_SpotifyDuPauvre.Server._op_uploadFileAndInsertMusic.invoke(self, ((filename, ), context))

        def uploadFileAndInsertMusicAsync(self, filename, context=None):
            return _M_SpotifyDuPauvre.Server._op_uploadFileAndInsertMusic.invokeAsync(self, ((filename, ), context))

        def begin_uploadFileAndInsertMusic(self, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_uploadFileAndInsertMusic.begin(self, ((filename, ), _response, _ex, _sent, context))

        def end_uploadFileAndInsertMusic(self, _r):
            return _M_SpotifyDuPauvre.Server._op_uploadFileAndInsertMusic.end(self, _r)

        def addMusic(self, musicData, context=None):
            return _M_SpotifyDuPauvre.Server._op_addMusic.invoke(self, ((musicData, ), context))

        def addMusicAsync(self, musicData, context=None):
            return _M_SpotifyDuPauvre.Server._op_addMusic.invokeAsync(self, ((musicData, ), context))

        def begin_addMusic(self, musicData, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_addMusic.begin(self, ((musicData, ), _response, _ex, _sent, context))

        def end_addMusic(self, _r):
            return _M_SpotifyDuPauvre.Server._op_addMusic.end(self, _r)

        def deleteMusicByTitle(self, titleMusic, context=None):
            return _M_SpotifyDuPauvre.Server._op_deleteMusicByTitle.invoke(self, ((titleMusic, ), context))

        def deleteMusicByTitleAsync(self, titleMusic, context=None):
            return _M_SpotifyDuPauvre.Server._op_deleteMusicByTitle.invokeAsync(self, ((titleMusic, ), context))

        def begin_deleteMusicByTitle(self, titleMusic, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_deleteMusicByTitle.begin(self, ((titleMusic, ), _response, _ex, _sent, context))

        def end_deleteMusicByTitle(self, _r):
            return _M_SpotifyDuPauvre.Server._op_deleteMusicByTitle.end(self, _r)

        def searchMusic(self, str, context=None):
            return _M_SpotifyDuPauvre.Server._op_searchMusic.invoke(self, ((str, ), context))

        def searchMusicAsync(self, str, context=None):
            return _M_SpotifyDuPauvre.Server._op_searchMusic.invokeAsync(self, ((str, ), context))

        def begin_searchMusic(self, str, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_searchMusic.begin(self, ((str, ), _response, _ex, _sent, context))

        def end_searchMusic(self, _r):
            return _M_SpotifyDuPauvre.Server._op_searchMusic.end(self, _r)

        def updateMusicChangeTitle(self, titleCurrent, newTitle, context=None):
            return _M_SpotifyDuPauvre.Server._op_updateMusicChangeTitle.invoke(self, ((titleCurrent, newTitle), context))

        def updateMusicChangeTitleAsync(self, titleCurrent, newTitle, context=None):
            return _M_SpotifyDuPauvre.Server._op_updateMusicChangeTitle.invokeAsync(self, ((titleCurrent, newTitle), context))

        def begin_updateMusicChangeTitle(self, titleCurrent, newTitle, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_updateMusicChangeTitle.begin(self, ((titleCurrent, newTitle), _response, _ex, _sent, context))

        def end_updateMusicChangeTitle(self, _r):
            return _M_SpotifyDuPauvre.Server._op_updateMusicChangeTitle.end(self, _r)

        def getAllMusics(self, context=None):
            return _M_SpotifyDuPauvre.Server._op_getAllMusics.invoke(self, ((), context))

        def getAllMusicsAsync(self, context=None):
            return _M_SpotifyDuPauvre.Server._op_getAllMusics.invokeAsync(self, ((), context))

        def begin_getAllMusics(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SpotifyDuPauvre.Server._op_getAllMusics.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllMusics(self, _r):
            return _M_SpotifyDuPauvre.Server._op_getAllMusics.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SpotifyDuPauvre.ServerPrx.ice_checkedCast(proxy, '::SpotifyDuPauvre::Server', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SpotifyDuPauvre.ServerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SpotifyDuPauvre::Server'
    _M_SpotifyDuPauvre._t_ServerPrx = IcePy.defineProxy('::SpotifyDuPauvre::Server', ServerPrx)

    _M_SpotifyDuPauvre.ServerPrx = ServerPrx
    del ServerPrx

    _M_SpotifyDuPauvre.Server = Ice.createTempClass()
    class Server(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SpotifyDuPauvre::Server')

        def ice_id(self, current=None):
            return '::SpotifyDuPauvre::Server'

        @staticmethod
        def ice_staticId():
            return '::SpotifyDuPauvre::Server'

        def helloWorld(self, helloWorld, current=None):
            raise NotImplementedError("servant method 'helloWorld' not implemented")

        def publishMessage(self, msg, current=None):
            raise NotImplementedError("servant method 'publishMessage' not implemented")

        def playMusic(self, filename, current=None):
            raise NotImplementedError("servant method 'playMusic' not implemented")

        def pauseMusic(self, current=None):
            raise NotImplementedError("servant method 'pauseMusic' not implemented")

        def stopMusic(self, current=None):
            raise NotImplementedError("servant method 'stopMusic' not implemented")

        def uploadPart(self, part, current=None):
            raise NotImplementedError("servant method 'uploadPart' not implemented")

        def uploadFileAndInsertMusic(self, filename, current=None):
            raise NotImplementedError("servant method 'uploadFileAndInsertMusic' not implemented")

        def addMusic(self, musicData, current=None):
            raise NotImplementedError("servant method 'addMusic' not implemented")

        def deleteMusicByTitle(self, titleMusic, current=None):
            raise NotImplementedError("servant method 'deleteMusicByTitle' not implemented")

        def searchMusic(self, str, current=None):
            raise NotImplementedError("servant method 'searchMusic' not implemented")

        def updateMusicChangeTitle(self, titleCurrent, newTitle, current=None):
            raise NotImplementedError("servant method 'updateMusicChangeTitle' not implemented")

        def getAllMusics(self, current=None):
            raise NotImplementedError("servant method 'getAllMusics' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SpotifyDuPauvre._t_ServerDisp)

        __repr__ = __str__

    _M_SpotifyDuPauvre._t_ServerDisp = IcePy.defineClass('::SpotifyDuPauvre::Server', Server, (), None, ())
    Server._ice_type = _M_SpotifyDuPauvre._t_ServerDisp

    Server._op_helloWorld = IcePy.Operation('helloWorld', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Server._op_publishMessage = IcePy.Operation('publishMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Server._op_playMusic = IcePy.Operation('playMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Server._op_pauseMusic = IcePy.Operation('pauseMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Server._op_stopMusic = IcePy.Operation('stopMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Server._op_uploadPart = IcePy.Operation('uploadPart', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SpotifyDuPauvre._t_byteList, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Server._op_uploadFileAndInsertMusic = IcePy.Operation('uploadFileAndInsertMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    Server._op_addMusic = IcePy.Operation('addMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Server._op_deleteMusicByTitle = IcePy.Operation('deleteMusicByTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    Server._op_searchMusic = IcePy.Operation('searchMusic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_SpotifyDuPauvre._t_musicResults, False, 0), ())
    Server._op_updateMusicChangeTitle = IcePy.Operation('updateMusicChangeTitle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    Server._op_getAllMusics = IcePy.Operation('getAllMusics', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SpotifyDuPauvre._t_musicList, False, 0), ())

    _M_SpotifyDuPauvre.Server = Server
    del Server

# End of module SpotifyDuPauvre
